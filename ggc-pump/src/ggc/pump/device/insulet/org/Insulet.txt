INSULET
=======

Insulet implementation was done with help from implementation from Tidepool. Original file is stored here, if we ever
need to look at the implementation again, or if we would like to compare it to their current version in case that
there were fixes made (we mostly copied just structures they used all other processing is GGC specific).


Tidepool struct format
======================

Tidepool implementation uses specific struct format decoding which is copied here for reference:

// Inspired by the Python struct class but not an attempt to duplicate it.
//
// You can give it a format string and it will attempt to parse a stream
// of bytes or into numbers of different sizes, or format a stream of bytes
// from a set of values, corresponding to the format string.
// Usage:
// format strings define the layout of a stream of values in an array, assumed
// to be an array of byte values; the array must be indexable.
// Format strings consist of fields; a field is a numeric size followed by a
// non-numeric character indicating the type. Whitespace between fields is ignored.
// The size parameter has 2 meanings -- for numeric values, it's the number of repetitions of
// this field. For strings, it's the storage length of the string.
// The legal type characters are:
// b -- a 1-byte unsigned value
// s -- a 2-byte unsigned short in little-endian format (0x01 0x00 is returned as 1, not 256)
// S -- a 2-byte unsigned short in big-endian format (0x01 0x00 is returned as 256, not 1)
// i -- a 4-byte unsigned integer in little-endian format
// I -- a 4-byte unsigned integer in big-endian format
// n -- a 4-byte signed integer in little-endian format
// N -- a 4-byte signed integer in big-endian format
// h -- a 2-byte signed integer in little-endian format
// H -- a 2-byte signed integer in big-endian format
// z -- a zero-terminated string of maximum length controlled by the size parameter.
// Z -- a string of bytes with the length controlled by the size parameter.
// f -- a 4-byte float in little-endian format
// F -- a 4-byte float in big-endian format
// . -- the appropriate number of bytes is ignored (used for padding)
// Any other character is treated like '.' -- but don't depend on this, because we may
// someday decide to use other characters.
//
// To put bytes into a structure, use pack as follows:
// len = pack(buf, offset, format, value...)
// for example:
// pack(buf, 0, "bbsi", 1, 2, 3, 4) would yield: 01 02 03 00 04 00 00 00 and return 8.
//
// To pull data back out, give unpack the format string and a list of parameter names.
// unpack(buf, 0, "2bsi", ["a", "b", "c", "d"]) will give you { a: 1, b: 2, c: 3, d: 4 }
// unpack can pack into an existing object if you pass it as the last argument. Otherwise,
// it will create one.


